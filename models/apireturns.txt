b'0.5714285714285715'
b'[(12.5, 12.5, 7.648529270389178), (165.65384615384616, 73.0, 284.0332293669447), (1502.923076923077, 955.0, 2192.6449584568304), (26.884615384615383, 14.0, 31.353885785435814), (0.5769230769230769, 1.0, 0.5038314736557788)]'
b'[\n  [\n    "Unnamed: 0",\n    0.0\n  ],\n  [\n    "corporation",\n    0.0\n  ],\n  [\n    "lastmonth_activity",\n    0.0\n  ],\n  [\n    "lastyear_activity",\n    0.0\n  ],\n  [\n    "number_of_employees",\n    0.0\n  ],\n  [\n    "exited",\n    0.0\n  ]\n]\n'
b'<!doctype html>\n<html lang=en>\n  <head>\n    <title>TypeError: model_predictions() takes 0 positional arguments but 1 was given\n // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "5a7nQGEYI0S7Xe53pfQx";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>TypeError</h1>\n<div class="detail">\n  <p class="errormsg">TypeError: model_predictions() takes 0 positional arguments but 1 was given\n</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-2217513643848">\n  <h4>File <cite class="filename">"C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2552</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2217514605768">\n  <h4>File <cite class="filename">"C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2532</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2217514605896">\n  <h4>File <cite class="filename">"C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2529</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2217514606024">\n  <h4>File <cite class="filename">"C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1825</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2217514606152">\n  <h4>File <cite class="filename">"C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1823</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2217514606280">\n  <h4>File <cite class="filename">"C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1799</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line before"><span class="ws">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2217514614856">\n  <h4>File <cite class="filename">"C:\\Users\\CHRISG17\\OneDrive - Pfizer\\Desktop\\Training\\UDACITY\\MLOpsEng\\Final_Project_4\\udacity-project4\\app.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">predict</code></h4>\n  <div class="source "><pre class="line before"><span class="ws">        </span>data_path = request.args.get(&#39;datapath&#39;)</pre>\n<pre class="line before"><span class="ws">    </span>elif request.method == &#34;POST&#34;:</pre>\n<pre class="line before"><span class="ws">        </span>data_path = request.form.get(&#39;datapath&#39;)</pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>return &#34;Method not allowed&#34;, 405</pre>\n<pre class="line current"><span class="ws">    </span>predictions, _ = model_predictions(data_path)</pre>\n<pre class="line after"><span class="ws">    </span>return str(predictions), 200</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span># Scoring Endpoint</pre>\n<pre class="line after"><span class="ws"></span>@app.route(&#34;/scoring&#34;, methods=[&#39;GET&#39;, &#39;OPTIONS&#39;])</pre></div>\n</div>\n</ul>\n  <blockquote>TypeError: model_predictions() takes 0 positional arguments but 1 was given\n</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &#34;C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py&#34;, line 2552, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &#34;C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py&#34;, line 2532, in wsgi_app\n    response = self.handle_exception(e)\n  File &#34;C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py&#34;, line 2529, in wsgi_app\n    response = self.full_dispatch_request()\n  File &#34;C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py&#34;, line 1825, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &#34;C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py&#34;, line 1823, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &#34;C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py&#34;, line 1799, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File &#34;C:\\Users\\CHRISG17\\OneDrive - Pfizer\\Desktop\\Training\\UDACITY\\MLOpsEng\\Final_Project_4\\udacity-project4\\app.py&#34;, line 34, in predict\n    predictions, _ = model_predictions(data_path)\nTypeError: model_predictions() takes 0 positional arguments but 1 was given\n</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py", line 2552, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py", line 2532, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py", line 2529, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py", line 1825, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py", line 1823, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\ANACONDA3\\envs\\udacity_project_4\\lib\\site-packages\\flask\\app.py", line 1799, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File "C:\\Users\\CHRISG17\\OneDrive - Pfizer\\Desktop\\Training\\UDACITY\\MLOpsEng\\Final_Project_4\\udacity-project4\\app.py", line 34, in predict\n    predictions, _ = model_predictions(data_path)\nTypeError: model_predictions() takes 0 positional arguments but 1 was given\n\n\n-->\n'